{"version":3,"sources":["Components/Photo.js","Components/Audio.js","Components/Video.js","Components/Text.js","App.js","serviceWorker.js","index.js"],"names":["item","src","photos","length","original_size","url","alt","summary","dangerouslySetInnerHTML","__html","caption","player","embed_code","body","months","App","useState","data","setData","offset","limit","total","navigation","setNavigation","fetchData","Axios","get","params","api_key","then","res","concat","response","posts","_links","next","query_params","total_posts","useEffect","AOS","init","duration","className","dataLength","hasMore","loader","endMessage","style","textAlign","margin","map","i","createdAt","Date","timestamp","data-aos","type","Video","Photo","Audio","Text","getMonth","getDate","getFullYear","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gRAEe,G,YAAA,gBAAGA,EAAH,EAAGA,KAAH,OACb,oCACE,yBACEC,IAAKD,EAAKE,OAAOF,EAAKE,OAAOC,OAAS,GAAGC,cAAcC,IACvDC,IAAKN,EAAKO,UAEZ,yBACEC,wBAAyB,CACvBC,OAAQT,EAAKU,cCRN,kBAAGV,EAAH,EAAGA,KAAH,OACb,oCACE,yBACEQ,wBAAyB,CACvBC,OAAQT,EAAKU,WAGjB,yBACEF,wBAAyB,CACvBC,OAAQT,EAAKW,YCTN,kBAAGX,EAAH,EAAGA,KAAH,OACb,oCACE,yBACEQ,wBAAyB,CACvBC,OAAQT,EAAKW,OAAOX,EAAKW,OAAOR,OAAS,GAAGS,cAGhD,yBACEJ,wBAAyB,CACvBC,OAAQT,EAAKU,aCTN,kBAAGV,EAAH,EAAGA,KAAH,OACb,yBACEQ,wBAAyB,CACvBC,OAAQT,EAAKa,SCMbC,EAAS,CACb,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OA0FaC,MAvFf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEuBF,mBAAS,CAC3CG,OAAQ,EACRC,MAAO,EACPC,MAAO,IALI,mBAENC,EAFM,KAEMC,EAFN,KAQPC,EAAY,WAChBC,IAAMC,IAAN,wDAAmE,CACjEC,OAAQ,CACNC,QAAS,qDACTT,OAAQG,EAAWH,OACnBC,MAAOE,EAAWF,SAEnBS,MAAK,SAACC,GACPA,EAAMA,EAAIb,KAEVC,EAAQD,EAAKc,OAAOD,EAAIE,SAASC,QACjCV,EAAc,CACZJ,OAAQW,EAAIE,SAASE,OAAOC,KAAKC,aAAajB,OAC9CC,MAAO,EACPC,MAAOS,EAAIO,kBAajB,OARAC,qBAAU,WACRd,IAEAe,IAAIC,KAAK,CACPC,SAAU,QAEX,IAGD,yBAAKC,UAAU,OACb,gCACE,yBAAKA,UAAU,aACb,qCACA,sDAIJ,0BAAMA,UAAU,aACd,kBAAC,IAAD,CACEC,WAAY1B,EAAKd,OACjBgC,KAAMX,EACNoB,QACmB,IAAhB3B,EAAKd,QAAgBmB,EAAWD,QAAUJ,EAAKd,SAAW,EAE7D0C,OAAQ,qCACRC,WACE,uBAAGC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,SACvC,0DAIHhC,EAAKiC,KAAI,SAAClD,EAAMmD,GACf,IAAIC,EAAY,IAAIC,KAAsB,IAAjBrD,EAAKsD,WAE9B,OACE,6BAASC,WAAS,WAChB,yBAAKb,UAAU,QACb,yBAAKA,UAAU,aACE,UAAd1C,EAAKwD,KAAmB,kBAACC,EAAD,CAAOzD,KAAMA,IAAW,qCAElC,UAAdA,EAAKwD,KAAmB,kBAACE,EAAD,CAAO1D,KAAMA,IAAW,qCAElC,UAAdA,EAAKwD,KAAmB,kBAACG,EAAD,CAAO3D,KAAMA,IAAW,qCAElC,SAAdA,EAAKwD,KAAkB,kBAACI,EAAD,CAAM5D,KAAMA,IAAW,qCAE/C,uBAAG0C,UAAU,iBAAb,UACE5B,EAAOsC,EAAUS,YADnB,YAEIT,EAAUU,UAFd,aAE4BV,EAAUW,0BCzFtCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c17b7d8b.chunk.js","sourcesContent":["import React from 'react'\n\nexport default ({ item }) => (\n  <>\n    <img\n      src={item.photos[item.photos.length - 1].original_size.url}\n      alt={item.summary}\n    />\n    <div\n      dangerouslySetInnerHTML={{\n        __html: item.caption,\n      }}\n    />\n  </>\n)\n","import React from 'react'\n\nexport default ({ item }) => (\n  <>\n    <div\n      dangerouslySetInnerHTML={{\n        __html: item.caption,\n      }}\n    />\n    <div\n      dangerouslySetInnerHTML={{\n        __html: item.player,\n      }}\n    />\n  </>\n)\n","import React from 'react'\n\nexport default ({ item }) => (\n  <>\n    <div\n      dangerouslySetInnerHTML={{\n        __html: item.player[item.player.length - 1].embed_code,\n      }}\n    />\n    <div\n      dangerouslySetInnerHTML={{\n        __html: item.caption,\n      }}\n    />\n  </>\n)\n","import React from 'react'\n\nexport default ({ item }) => (\n  <div\n    dangerouslySetInnerHTML={{\n      __html: item.body,\n    }}\n  />\n)\n","import React, { useEffect, useState } from 'react'\nimport Axios from 'axios'\nimport AOS from 'aos'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport 'aos/dist/aos.css'\nimport './App.css'\nimport Photo from './Components/Photo'\nimport Audio from './Components/Audio'\nimport Video from './Components/Video'\nimport Text from './Components/Text'\n\nconst months = [\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'Jun',\n  'Jul',\n  'Aug',\n  'Sep',\n  'Oct',\n  'Nov',\n  'Dec',\n]\n\nfunction App() {\n  const [data, setData] = useState([])\n  const [navigation, setNavigation] = useState({\n    offset: 0,\n    limit: 5,\n    total: 0,\n  })\n\n  const fetchData = () => {\n    Axios.get(`https://api.tumblr.com/v2/blog/gtfaf.tumblr.com/posts`, {\n      params: {\n        api_key: 'u1S2Kgklg26Y21kMp1KMMKGDOC2xrPGCZsqav7Qc5E8myZEAE4',\n        offset: navigation.offset,\n        limit: navigation.limit,\n      },\n    }).then((res) => {\n      res = res.data\n\n      setData(data.concat(res.response.posts))\n      setNavigation({\n        offset: res.response._links.next.query_params.offset,\n        limit: 5,\n        total: res.total_posts,\n      })\n    })\n  }\n\n  useEffect(() => {\n    fetchData()\n\n    AOS.init({\n      duration: 2000,\n    })\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div className=\"App\">\n      <header>\n        <div className=\"container\">\n          <h1>gtfaf</h1>\n          <p>I enjoy every moment.</p>\n        </div>\n      </header>\n\n      <main className=\"container\">\n        <InfiniteScroll\n          dataLength={data.length} //This is important field to render the next data\n          next={fetchData}\n          hasMore={\n            (data.length !== 0 && navigation.total !== data.length) || true\n          }\n          loader={<></>}\n          endMessage={\n            <p style={{ textAlign: 'center', margin: '50px' }}>\n              <b>There is the end of mine.</b>\n            </p>\n          }\n        >\n          {data.map((item, i) => {\n            let createdAt = new Date(item.timestamp * 1000)\n\n            return (\n              <article data-aos=\"fade-up\">\n                <div className=\"card\">\n                  <div className=\"card-body\">\n                    {item.type === 'video' ? <Video item={item} /> : <></>}\n\n                    {item.type === 'photo' ? <Photo item={item} /> : <></>}\n\n                    {item.type === 'audio' ? <Audio item={item} /> : <></>}\n\n                    {item.type === 'text' ? <Text item={item} /> : <></>}\n\n                    <p className=\"card-datetime\">{`${\n                      months[createdAt.getMonth()]\n                    } ${createdAt.getDate()}, ${createdAt.getFullYear()}`}</p>\n                  </div>\n                </div>\n              </article>\n            )\n          })}\n        </InfiniteScroll>\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}